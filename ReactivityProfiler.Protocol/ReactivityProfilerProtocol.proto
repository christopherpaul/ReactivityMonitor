syntax = "proto3";
option csharp_namespace = "ReactivityProfiler.Protocol";

message EventMessage {
	oneof Event {
		ModuleLoadedEvent ModuleLoaded = 1;
		MethodCallInstrumentedEvent MethodCallInstrumented = 2;
		ObservableCreatedEvent ObservableCreated = 3;
		SubscribeEvent Subscribe = 4;
		UnsubscribeEvent Unsubscribe = 5;
		OnNextEvent OnNext = 6;
		OnCompletedEvent OnCompleted = 7;
		OnErrorEvent OnError = 8;
		ObservablesLinkedEvent ObservablesLinked = 9;
	}
}

message ModuleLoadedEvent {
	uint64 ModuleID = 1;
	string Path = 2;
}

message MethodCallInstrumentedEvent {
    int32 InstrumentationPointId = 1;
    uint64 ModuleId = 2;
    uint32 FunctionToken = 3;
    int32 InstructionOffset = 4;
    string CalledMethodName = 5;
	string OwningTypeName = 6;
	string CallingMethodName = 7;
}

// Observable's ID is CreatedEvent.SequenceId
message ObservableCreatedEvent {
	EventInfo CreatedEvent = 1;
	int32 InstrumentationPointId = 2;

	//next ID is 5
}

message ObservablesLinkedEvent {
	int64 OutputObservableId = 1;
	int64 InputObservableId = 2;
}

// Subscription's ID is Event.SequenceId from this event
message SubscribeEvent {
	EventInfo Event = 1;
	int64 ObservableId = 2;
}

message UnsubscribeEvent {
	EventInfo Event = 1;
	int64 SubscriptionId = 2; // refers to Event.SequenceId of the SubscribeEvent
}

message OnNextEvent {
	EventInfo Event = 1;
	int64 SubscriptionId = 2; // refers to Event.SequenceId of the SubscribeEvent
	string ValueString = 3;
}

message OnCompletedEvent {
	EventInfo Event = 1;
	int64 SubscriptionId = 2; // refers to Event.SequenceId of the SubscribeEvent
}

message OnErrorEvent {
	EventInfo Event = 1;
	int64 SubscriptionId = 2; // refers to Event.SequenceId of the SubscribeEvent
	string Message = 3;
}

message EventInfo {
	int64 SequenceId = 1;
	int64 Timestamp = 2;
	int32 ThreadId = 3;
}

message RequestMessage {
	oneof Request {
		SendInstrumentationEventsRequest SendInstrumentationEvents = 1;
		StartMonitoringRequest StartMonitoring = 2;
		StopMonitoringRequest StopMonitoring = 3;
	}
}

message SendInstrumentationEventsRequest {

}

message StartMonitoringRequest {
	repeated int32 InstrumentationPointId = 1;
}

message StopMonitoringRequest {
	repeated int32 InstrumentationPointId = 2;
}
