syntax = "proto3";
option csharp_namespace = "ReactivityProfiler.Protocol";

message EventMessage {
	oneof Event {
		ModuleLoadedEvent ModuleLoaded = 1;
		MethodCallInstrumentedEvent MethodCallInstrumented = 2;
		ObservableCreatedEvent ObservableCreated = 3;
		SubscribeEvent Subscribe = 4;
		UnsubscribeEvent Unsubscribe = 5;
		OnNextEvent OnNext = 6;
		OnCompletedEvent OnCompleted = 7;
		OnErrorEvent OnError = 8;
		ObservablesLinkedEvent ObservablesLinked = 9;
		ObjectPropertiesResponse ObjectProperties = 10;
		ObjectItemsResponse ObjectItems = 11;
		Type Type = 12;
		ClientEvent ClientEvent = 13;
	}
}

message ModuleLoadedEvent {
	uint64 ModuleID = 1;
	string Path = 2;
	string AssemblyName = 3;
}

message MethodCallInstrumentedEvent {
    int32 InstrumentationPointId = 1;
    uint64 ModuleId = 2;
    uint32 FunctionToken = 3;
    int32 InstructionOffset = 4;
    string CalledMethodName = 5;
	string OwningTypeName = 6;
	string CallingMethodName = 7;
}

// Observable's ID is CreatedEvent.SequenceId
message ObservableCreatedEvent {
	reserved 3, 4;
	EventInfo CreatedEvent = 1;
	int32 InstrumentationPointId = 2;
}

message ObservablesLinkedEvent {
	int64 OutputObservableId = 1;
	int64 InputObservableId = 2;
}

// Subscription's ID is Event.SequenceId from this event
message SubscribeEvent {
	EventInfo Event = 1;
	int64 ObservableId = 2;
}

message UnsubscribeEvent {
	EventInfo Event = 1;
	int64 SubscriptionId = 2; // refers to Event.SequenceId of the SubscribeEvent
}

message OnNextEvent {
	reserved 3;
	EventInfo Event = 1;
	int64 SubscriptionId = 2; // refers to Event.SequenceId of the SubscribeEvent
	Value Value = 4;
}

message OnCompletedEvent {
	EventInfo Event = 1;
	int64 SubscriptionId = 2; // refers to Event.SequenceId of the SubscribeEvent
}

message OnErrorEvent {
	reserved 3;
	EventInfo Event = 1;
	int64 SubscriptionId = 2; // refers to Event.SequenceId of the SubscribeEvent
	Value ExceptionValue = 4;
}

message ClientEvent {
	EventInfo Event = 1;
	int32 Id = 2;
	string Name = 3;
	string Description = 4;
}

message EventInfo {
	int64 SequenceId = 1;
	int64 Timestamp = 2;
	int32 ThreadId = 3;
}

message ObjectPropertiesResponse {
	int64 ObjectId = 1;
	repeated Value PropertyValues = 2; // order matches Type.PropertyNames
}

message ObjectItemsResponse {
	int64 ObjectId = 1;
	int32 StartingAt = 2;
	repeated Value ItemValues = 3;
	bool CountReached = 4;
}

message RequestMessage {
	oneof Request {
		SendInstrumentationEventsRequest SendInstrumentationEvents = 1;
		StartMonitoringRequest StartMonitoring = 2;
		StopMonitoringRequest StopMonitoring = 3;
		ObjectPropertiesRequest GetObjectProperties = 4;
		ObjectItemsRequest GetObjectItems = 5;
		RecordEventRequest RecordEvent = 6;
		DisconnectRequest Disconnect = 7;
	}
}

message SendInstrumentationEventsRequest {
	enum RequestMode {
		CONTINUOUS = 0; // send all instrumentation info and continue sending as more becomes available
		ONCE_ALL = 1; // send all instrumentation info currently available
		ONCE_UNSENT = 2; // send instrumentation info that hasn't already been sent
	}
	RequestMode Mode = 1;
}

message StartMonitoringRequest {
	repeated int32 InstrumentationPointId = 1;
}

message StopMonitoringRequest {
	repeated int32 InstrumentationPointId = 2;
}

message ObjectPropertiesRequest {
	int64 ObjectId = 1;
}

message ObjectItemsRequest {
	int64 ObjectId = 1;
	int32 StartAt = 2;
	int32 MaxCount = 3; // max number to enumerate
}

message RecordEventRequest {
	// server does not interpret these fields, but includes them in the response, so
	// client can use for whatever purpose makes sense
	int32 Id = 1;
	string Name = 2;
	string Description = 3;
}

message DisconnectRequest {
}

message Value {
	int32 TypeId = 1;
	oneof Value {
		bool Null = 2;
		int64 Int64 = 3; // byte, sbyte, int16, uint16, int32, uint32, int64, IntPtr
		uint64 UInt64 = 4; // uint64, UIntPtr
		double Double = 5; // double, float
		int32 Char = 6;
		bool Bool = 7;
		string String = 8;
		int64 Timespan = 9;
		int64 DateTimeUtc = 10;
		int64 DateTimeLocal = 11;
		int64 DateTimeUnspecified = 12;
		bytes ByteString = 13; // Guid, short byte arrays
		Object Object = 14; // anything else
	}
	bool IsExceptionGettingValue = 15;
}

message Type {
	int32 TypeId = 1;
	string TypeName = 2;
	repeated string PropertyNames = 3;
}

message Object {
	int64 ObjectId = 1;
	string StringRepresentation = 2; // generally ToString() result
	bool HasItemCount = 3;
	int32 ItemCount = 4; // -1 if count is not known
}
