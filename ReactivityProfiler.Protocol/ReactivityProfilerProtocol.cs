// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ReactivityProfilerProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReactivityProfiler.Protocol {

  /// <summary>Holder for reflection information generated from ReactivityProfilerProtocol.proto</summary>
  public static partial class ReactivityProfilerProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for ReactivityProfilerProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReactivityProfilerProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBSZWFjdGl2aXR5UHJvZmlsZXJQcm90b2NvbC5wcm90byKDAQoMRXZlbnRN",
            "ZXNzYWdlEioKDE1vZHVsZUxvYWRlZBgBIAEoCzISLk1vZHVsZUxvYWRlZEV2",
            "ZW50SAASPgoWTWV0aG9kQ2FsbEluc3RydW1lbnRlZBgCIAEoCzIcLk1ldGhv",
            "ZENhbGxJbnN0cnVtZW50ZWRFdmVudEgAQgcKBUV2ZW50IjMKEU1vZHVsZUxv",
            "YWRlZEV2ZW50EhAKCE1vZHVsZUlEGAEgASgEEgwKBFBhdGgYAiABKAkizgEK",
            "G01ldGhvZENhbGxJbnN0cnVtZW50ZWRFdmVudBIeChZJbnN0cnVtZW50YXRp",
            "b25Qb2ludElkGAEgASgFEhAKCE1vZHVsZUlkGAIgASgEEhUKDUZ1bmN0aW9u",
            "VG9rZW4YAyABKA0SGQoRSW5zdHJ1Y3Rpb25PZmZzZXQYBCABKAUSGAoQQ2Fs",
            "bGVkTWV0aG9kTmFtZRgFIAEoCRIWCg5Pd25pbmdUeXBlTmFtZRgGIAEoCRIZ",
            "ChFDYWxsaW5nTWV0aG9kTmFtZRgHIAEoCSJjCg5SZXF1ZXN0TWVzc2FnZRJG",
            "ChlTZW5kSW5zdHJ1bWVudGF0aW9uRXZlbnRzGAEgASgLMiEuU2VuZEluc3Ry",
            "dW1lbnRhdGlvbkV2ZW50c1JlcXVlc3RIAEIJCgdSZXF1ZXN0IiIKIFNlbmRJ",
            "bnN0cnVtZW50YXRpb25FdmVudHNSZXF1ZXN0Qh6qAhtSZWFjdGl2aXR5UHJv",
            "ZmlsZXIuUHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReactivityProfiler.Protocol.EventMessage), global::ReactivityProfiler.Protocol.EventMessage.Parser, new[]{ "ModuleLoaded", "MethodCallInstrumented" }, new[]{ "Event" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReactivityProfiler.Protocol.ModuleLoadedEvent), global::ReactivityProfiler.Protocol.ModuleLoadedEvent.Parser, new[]{ "ModuleID", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReactivityProfiler.Protocol.MethodCallInstrumentedEvent), global::ReactivityProfiler.Protocol.MethodCallInstrumentedEvent.Parser, new[]{ "InstrumentationPointId", "ModuleId", "FunctionToken", "InstructionOffset", "CalledMethodName", "OwningTypeName", "CallingMethodName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReactivityProfiler.Protocol.RequestMessage), global::ReactivityProfiler.Protocol.RequestMessage.Parser, new[]{ "SendInstrumentationEvents" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReactivityProfiler.Protocol.SendInstrumentationEventsRequest), global::ReactivityProfiler.Protocol.SendInstrumentationEventsRequest.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EventMessage : pb::IMessage<EventMessage> {
    private static readonly pb::MessageParser<EventMessage> _parser = new pb::MessageParser<EventMessage>(() => new EventMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReactivityProfiler.Protocol.ReactivityProfilerProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMessage(EventMessage other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.ModuleLoaded:
          ModuleLoaded = other.ModuleLoaded.Clone();
          break;
        case EventOneofCase.MethodCallInstrumented:
          MethodCallInstrumented = other.MethodCallInstrumented.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMessage Clone() {
      return new EventMessage(this);
    }

    /// <summary>Field number for the "ModuleLoaded" field.</summary>
    public const int ModuleLoadedFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReactivityProfiler.Protocol.ModuleLoadedEvent ModuleLoaded {
      get { return eventCase_ == EventOneofCase.ModuleLoaded ? (global::ReactivityProfiler.Protocol.ModuleLoadedEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ModuleLoaded;
      }
    }

    /// <summary>Field number for the "MethodCallInstrumented" field.</summary>
    public const int MethodCallInstrumentedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReactivityProfiler.Protocol.MethodCallInstrumentedEvent MethodCallInstrumented {
      get { return eventCase_ == EventOneofCase.MethodCallInstrumented ? (global::ReactivityProfiler.Protocol.MethodCallInstrumentedEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.MethodCallInstrumented;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "Event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      ModuleLoaded = 1,
      MethodCallInstrumented = 2,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ModuleLoaded, other.ModuleLoaded)) return false;
      if (!object.Equals(MethodCallInstrumented, other.MethodCallInstrumented)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.ModuleLoaded) hash ^= ModuleLoaded.GetHashCode();
      if (eventCase_ == EventOneofCase.MethodCallInstrumented) hash ^= MethodCallInstrumented.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.ModuleLoaded) {
        output.WriteRawTag(10);
        output.WriteMessage(ModuleLoaded);
      }
      if (eventCase_ == EventOneofCase.MethodCallInstrumented) {
        output.WriteRawTag(18);
        output.WriteMessage(MethodCallInstrumented);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.ModuleLoaded) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModuleLoaded);
      }
      if (eventCase_ == EventOneofCase.MethodCallInstrumented) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MethodCallInstrumented);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMessage other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.ModuleLoaded:
          if (ModuleLoaded == null) {
            ModuleLoaded = new global::ReactivityProfiler.Protocol.ModuleLoadedEvent();
          }
          ModuleLoaded.MergeFrom(other.ModuleLoaded);
          break;
        case EventOneofCase.MethodCallInstrumented:
          if (MethodCallInstrumented == null) {
            MethodCallInstrumented = new global::ReactivityProfiler.Protocol.MethodCallInstrumentedEvent();
          }
          MethodCallInstrumented.MergeFrom(other.MethodCallInstrumented);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::ReactivityProfiler.Protocol.ModuleLoadedEvent subBuilder = new global::ReactivityProfiler.Protocol.ModuleLoadedEvent();
            if (eventCase_ == EventOneofCase.ModuleLoaded) {
              subBuilder.MergeFrom(ModuleLoaded);
            }
            input.ReadMessage(subBuilder);
            ModuleLoaded = subBuilder;
            break;
          }
          case 18: {
            global::ReactivityProfiler.Protocol.MethodCallInstrumentedEvent subBuilder = new global::ReactivityProfiler.Protocol.MethodCallInstrumentedEvent();
            if (eventCase_ == EventOneofCase.MethodCallInstrumented) {
              subBuilder.MergeFrom(MethodCallInstrumented);
            }
            input.ReadMessage(subBuilder);
            MethodCallInstrumented = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModuleLoadedEvent : pb::IMessage<ModuleLoadedEvent> {
    private static readonly pb::MessageParser<ModuleLoadedEvent> _parser = new pb::MessageParser<ModuleLoadedEvent>(() => new ModuleLoadedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleLoadedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReactivityProfiler.Protocol.ReactivityProfilerProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleLoadedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleLoadedEvent(ModuleLoadedEvent other) : this() {
      moduleID_ = other.moduleID_;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleLoadedEvent Clone() {
      return new ModuleLoadedEvent(this);
    }

    /// <summary>Field number for the "ModuleID" field.</summary>
    public const int ModuleIDFieldNumber = 1;
    private ulong moduleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ModuleID {
      get { return moduleID_; }
      set {
        moduleID_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleLoadedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleLoadedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModuleID != other.ModuleID) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModuleID != 0UL) hash ^= ModuleID.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModuleID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ModuleID);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModuleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ModuleID);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleLoadedEvent other) {
      if (other == null) {
        return;
      }
      if (other.ModuleID != 0UL) {
        ModuleID = other.ModuleID;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ModuleID = input.ReadUInt64();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MethodCallInstrumentedEvent : pb::IMessage<MethodCallInstrumentedEvent> {
    private static readonly pb::MessageParser<MethodCallInstrumentedEvent> _parser = new pb::MessageParser<MethodCallInstrumentedEvent>(() => new MethodCallInstrumentedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodCallInstrumentedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReactivityProfiler.Protocol.ReactivityProfilerProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodCallInstrumentedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodCallInstrumentedEvent(MethodCallInstrumentedEvent other) : this() {
      instrumentationPointId_ = other.instrumentationPointId_;
      moduleId_ = other.moduleId_;
      functionToken_ = other.functionToken_;
      instructionOffset_ = other.instructionOffset_;
      calledMethodName_ = other.calledMethodName_;
      owningTypeName_ = other.owningTypeName_;
      callingMethodName_ = other.callingMethodName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodCallInstrumentedEvent Clone() {
      return new MethodCallInstrumentedEvent(this);
    }

    /// <summary>Field number for the "InstrumentationPointId" field.</summary>
    public const int InstrumentationPointIdFieldNumber = 1;
    private int instrumentationPointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstrumentationPointId {
      get { return instrumentationPointId_; }
      set {
        instrumentationPointId_ = value;
      }
    }

    /// <summary>Field number for the "ModuleId" field.</summary>
    public const int ModuleIdFieldNumber = 2;
    private ulong moduleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ModuleId {
      get { return moduleId_; }
      set {
        moduleId_ = value;
      }
    }

    /// <summary>Field number for the "FunctionToken" field.</summary>
    public const int FunctionTokenFieldNumber = 3;
    private uint functionToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FunctionToken {
      get { return functionToken_; }
      set {
        functionToken_ = value;
      }
    }

    /// <summary>Field number for the "InstructionOffset" field.</summary>
    public const int InstructionOffsetFieldNumber = 4;
    private int instructionOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstructionOffset {
      get { return instructionOffset_; }
      set {
        instructionOffset_ = value;
      }
    }

    /// <summary>Field number for the "CalledMethodName" field.</summary>
    public const int CalledMethodNameFieldNumber = 5;
    private string calledMethodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalledMethodName {
      get { return calledMethodName_; }
      set {
        calledMethodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OwningTypeName" field.</summary>
    public const int OwningTypeNameFieldNumber = 6;
    private string owningTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwningTypeName {
      get { return owningTypeName_; }
      set {
        owningTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CallingMethodName" field.</summary>
    public const int CallingMethodNameFieldNumber = 7;
    private string callingMethodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallingMethodName {
      get { return callingMethodName_; }
      set {
        callingMethodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodCallInstrumentedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodCallInstrumentedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentationPointId != other.InstrumentationPointId) return false;
      if (ModuleId != other.ModuleId) return false;
      if (FunctionToken != other.FunctionToken) return false;
      if (InstructionOffset != other.InstructionOffset) return false;
      if (CalledMethodName != other.CalledMethodName) return false;
      if (OwningTypeName != other.OwningTypeName) return false;
      if (CallingMethodName != other.CallingMethodName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentationPointId != 0) hash ^= InstrumentationPointId.GetHashCode();
      if (ModuleId != 0UL) hash ^= ModuleId.GetHashCode();
      if (FunctionToken != 0) hash ^= FunctionToken.GetHashCode();
      if (InstructionOffset != 0) hash ^= InstructionOffset.GetHashCode();
      if (CalledMethodName.Length != 0) hash ^= CalledMethodName.GetHashCode();
      if (OwningTypeName.Length != 0) hash ^= OwningTypeName.GetHashCode();
      if (CallingMethodName.Length != 0) hash ^= CallingMethodName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstrumentationPointId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstrumentationPointId);
      }
      if (ModuleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ModuleId);
      }
      if (FunctionToken != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FunctionToken);
      }
      if (InstructionOffset != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InstructionOffset);
      }
      if (CalledMethodName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CalledMethodName);
      }
      if (OwningTypeName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OwningTypeName);
      }
      if (CallingMethodName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CallingMethodName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentationPointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstrumentationPointId);
      }
      if (ModuleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ModuleId);
      }
      if (FunctionToken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FunctionToken);
      }
      if (InstructionOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstructionOffset);
      }
      if (CalledMethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CalledMethodName);
      }
      if (OwningTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwningTypeName);
      }
      if (CallingMethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallingMethodName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodCallInstrumentedEvent other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentationPointId != 0) {
        InstrumentationPointId = other.InstrumentationPointId;
      }
      if (other.ModuleId != 0UL) {
        ModuleId = other.ModuleId;
      }
      if (other.FunctionToken != 0) {
        FunctionToken = other.FunctionToken;
      }
      if (other.InstructionOffset != 0) {
        InstructionOffset = other.InstructionOffset;
      }
      if (other.CalledMethodName.Length != 0) {
        CalledMethodName = other.CalledMethodName;
      }
      if (other.OwningTypeName.Length != 0) {
        OwningTypeName = other.OwningTypeName;
      }
      if (other.CallingMethodName.Length != 0) {
        CallingMethodName = other.CallingMethodName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstrumentationPointId = input.ReadInt32();
            break;
          }
          case 16: {
            ModuleId = input.ReadUInt64();
            break;
          }
          case 24: {
            FunctionToken = input.ReadUInt32();
            break;
          }
          case 32: {
            InstructionOffset = input.ReadInt32();
            break;
          }
          case 42: {
            CalledMethodName = input.ReadString();
            break;
          }
          case 50: {
            OwningTypeName = input.ReadString();
            break;
          }
          case 58: {
            CallingMethodName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestMessage : pb::IMessage<RequestMessage> {
    private static readonly pb::MessageParser<RequestMessage> _parser = new pb::MessageParser<RequestMessage>(() => new RequestMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReactivityProfiler.Protocol.ReactivityProfilerProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMessage(RequestMessage other) : this() {
      switch (other.RequestCase) {
        case RequestOneofCase.SendInstrumentationEvents:
          SendInstrumentationEvents = other.SendInstrumentationEvents.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMessage Clone() {
      return new RequestMessage(this);
    }

    /// <summary>Field number for the "SendInstrumentationEvents" field.</summary>
    public const int SendInstrumentationEventsFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReactivityProfiler.Protocol.SendInstrumentationEventsRequest SendInstrumentationEvents {
      get { return requestCase_ == RequestOneofCase.SendInstrumentationEvents ? (global::ReactivityProfiler.Protocol.SendInstrumentationEventsRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.SendInstrumentationEvents;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "Request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      SendInstrumentationEvents = 1,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SendInstrumentationEvents, other.SendInstrumentationEvents)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.SendInstrumentationEvents) hash ^= SendInstrumentationEvents.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestCase_ == RequestOneofCase.SendInstrumentationEvents) {
        output.WriteRawTag(10);
        output.WriteMessage(SendInstrumentationEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.SendInstrumentationEvents) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendInstrumentationEvents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestMessage other) {
      if (other == null) {
        return;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.SendInstrumentationEvents:
          if (SendInstrumentationEvents == null) {
            SendInstrumentationEvents = new global::ReactivityProfiler.Protocol.SendInstrumentationEventsRequest();
          }
          SendInstrumentationEvents.MergeFrom(other.SendInstrumentationEvents);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::ReactivityProfiler.Protocol.SendInstrumentationEventsRequest subBuilder = new global::ReactivityProfiler.Protocol.SendInstrumentationEventsRequest();
            if (requestCase_ == RequestOneofCase.SendInstrumentationEvents) {
              subBuilder.MergeFrom(SendInstrumentationEvents);
            }
            input.ReadMessage(subBuilder);
            SendInstrumentationEvents = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendInstrumentationEventsRequest : pb::IMessage<SendInstrumentationEventsRequest> {
    private static readonly pb::MessageParser<SendInstrumentationEventsRequest> _parser = new pb::MessageParser<SendInstrumentationEventsRequest>(() => new SendInstrumentationEventsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendInstrumentationEventsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReactivityProfiler.Protocol.ReactivityProfilerProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendInstrumentationEventsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendInstrumentationEventsRequest(SendInstrumentationEventsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendInstrumentationEventsRequest Clone() {
      return new SendInstrumentationEventsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendInstrumentationEventsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendInstrumentationEventsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendInstrumentationEventsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
